Terminals unused in grammar

    INTEGER_LITERAL
    REAL_LITERAL
    COMPLEX_LITERAL
    CHAR_LITERAL
    STRING_LITERAL
    IDENTIFIER
    "["
    "]"
    "("
    ")"
    "{"
    "}"
    ":"
    "=>"
    "+"
    "-"
    "*"
    "/"
    "//"
    "^"
    "%"
    "+="
    "-="
    "*="
    "/="
    "//="
    "^="
    "%="
    "+<"
    "-<"
    "*<"
    "/<"
    "//<"
    "^<"
    "%<"
    "+<="
    "-<="
    "*<="
    "/<="
    "//<="
    "^<="
    "%<="
    "&&"
    "||"
    "!"
    "<"
    "<="
    "<=>"
    ">="
    ">"
    "=="
    "!="
    "&"
    "|"
    "^^"
    "~"
    "<<"
    ">>"
    "&="
    "|="
    "^^="
    "~="
    "<<="
    ">>="
    "&<"
    "|<"
    "^^<"
    "~<"
    "<<<"
    ">><"
    "&<="
    "|<="
    "^^<="
    "~<="
    "<<<="
    ">><="
    "="
    "<-"
    "++"
    "--"
    "..."
    "::"
    "."
    "?"
    "int8_t"
    "int16_t"
    "int32_t"
    "int64_t"
    "int"
    "real32_t"
    "real64_t"
    "real"
    "bool"
    "char"
    "mod"
    "void"
    "true"
    "false"
    "this"
    "nptr"
    "let"
    "const"
    "compeval"
    "pure"
    "static"
    "nothrow"
    "in"
    "inout"
    "out"
    "move"
    "operator"
    "delete"
    "class"
    "public"
    "protected"
    "private"
    "enum"
    "constructor"
    "destructor"
    "default"
    "define"
    "if"
    "else"
    "else if"
    "for"
    "do"
    "while"
    "try"
    "catch"
    "throw"
    "break"
    "return"
    "continue"
    "match"
    "when"
    "typeset"
    "template"
    "where"
    "type"
    "module"
    "namespace"
    "import"
    "from"
    "as"
    "with"
    "is"
    "sizeof"
    "typeof"
    "static_assert"
    "assert"
    "new"
    "dynamic"


Grammar

    0 $accept: nikola $end

    1 nikola: statements

    2 statements: statement statements
    3           | ε

    4 statement: expression ";"

    5 expression: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER_LITERAL <std::string> (258)
    REAL_LITERAL <std::string> (259)
    COMPLEX_LITERAL <std::string> (260)
    CHAR_LITERAL <std::string> (261)
    STRING_LITERAL <std::string> (262)
    IDENTIFIER <std::string> (263)
    "[" (264)
    "]" (265)
    "(" (266)
    ")" (267)
    "{" (268)
    "}" (269)
    ";" (270) 4
    ":" (271)
    "=>" (272)
    "+" (273)
    "-" (274)
    "*" (275)
    "/" (276)
    "//" (277)
    "^" (278)
    "%" (279)
    "+=" (280)
    "-=" (281)
    "*=" (282)
    "/=" (283)
    "//=" (284)
    "^=" (285)
    "%=" (286)
    "+<" (287)
    "-<" (288)
    "*<" (289)
    "/<" (290)
    "//<" (291)
    "^<" (292)
    "%<" (293)
    "+<=" (294)
    "-<=" (295)
    "*<=" (296)
    "/<=" (297)
    "//<=" (298)
    "^<=" (299)
    "%<=" (300)
    "&&" (301)
    "||" (302)
    "!" (303)
    "<" (304)
    "<=" (305)
    "<=>" (306)
    ">=" (307)
    ">" (308)
    "==" (309)
    "!=" (310)
    "&" (311)
    "|" (312)
    "^^" (313)
    "~" (314)
    "<<" (315)
    ">>" (316)
    "&=" (317)
    "|=" (318)
    "^^=" (319)
    "~=" (320)
    "<<=" (321)
    ">>=" (322)
    "&<" (323)
    "|<" (324)
    "^^<" (325)
    "~<" (326)
    "<<<" (327)
    ">><" (328)
    "&<=" (329)
    "|<=" (330)
    "^^<=" (331)
    "~<=" (332)
    "<<<=" (333)
    ">><=" (334)
    "=" (335)
    "<-" (336)
    "++" (337)
    "--" (338)
    "..." (339)
    "::" (340)
    "." (341)
    "?" (342)
    "int8_t" (343)
    "int16_t" (344)
    "int32_t" (345)
    "int64_t" (346)
    "int" (347)
    "real32_t" (348)
    "real64_t" (349)
    "real" (350)
    "bool" (351)
    "char" (352)
    "mod" (353)
    "void" (354)
    "true" (355)
    "false" (356)
    "this" (357)
    "nptr" (358)
    "let" (359)
    "const" (360)
    "compeval" (361)
    "pure" (362)
    "static" (363)
    "nothrow" (364)
    "in" (365)
    "inout" (366)
    "out" (367)
    "move" (368)
    "operator" (369)
    "delete" (370)
    "class" (371)
    "public" (372)
    "protected" (373)
    "private" (374)
    "enum" (375)
    "constructor" (376)
    "destructor" (377)
    "default" (378)
    "define" (379)
    "if" (380)
    "else" (381)
    "else if" (382)
    "for" (383)
    "do" (384)
    "while" (385)
    "try" (386)
    "catch" (387)
    "throw" (388)
    "break" (389)
    "return" (390)
    "continue" (391)
    "match" (392)
    "when" (393)
    "typeset" (394)
    "template" (395)
    "where" (396)
    "type" (397)
    "module" (398)
    "namespace" (399)
    "import" (400)
    "from" (401)
    "as" (402)
    "with" (403)
    "is" (404)
    "sizeof" (405)
    "typeof" (406)
    "static_assert" (407)
    "assert" (408)
    "new" (409)
    "dynamic" (410)


Nonterminals, with rules where they appear

    $accept (156)
        on left: 0
    nikola (157)
        on left: 1
        on right: 0
    statements (158)
        on left: 2 3
        on right: 1 2
    statement (159)
        on left: 4
        on right: 2
    expression (160)
        on left: 5
        on right: 4


State 0

    0 $accept: • nikola $end

    ";"       reduce using rule 5 (expression)
    $default  reduce using rule 3 (statements)

    nikola      go to state 1
    statements  go to state 2
    statement   go to state 3
    expression  go to state 4


State 1

    0 $accept: nikola • $end

    $end  shift, and go to state 5


State 2

    1 nikola: statements •

    $default  reduce using rule 1 (nikola)


State 3

    2 statements: statement • statements

    ";"       reduce using rule 5 (expression)
    $default  reduce using rule 3 (statements)

    statements  go to state 6
    statement   go to state 3
    expression  go to state 4


State 4

    4 statement: expression • ";"

    ";"  shift, and go to state 7


State 5

    0 $accept: nikola $end •

    $default  accept


State 6

    2 statements: statement statements •

    $default  reduce using rule 2 (statements)


State 7

    4 statement: expression ";" •

    $default  reduce using rule 4 (statement)
