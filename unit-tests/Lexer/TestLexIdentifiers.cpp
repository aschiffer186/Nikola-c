#include <gtest/gtest.h>

#include "LexerTestUtils.hpp"

TEST(TestLexer, TestLexIdentifiers)
{
    runLexerTest("e", NikolaParser::symbol_kind_type::S_IDENTIFIER);
    runLexerTest("_", NikolaParser::symbol_kind_type::S_IDENTIFIER);
    runLexerTest("Z", NikolaParser::symbol_kind_type::S_IDENTIFIER);
    runLexerTest("_abcdefghijklmnopqrstuvwxyz-ABCDEFGHIJKLMOPQRSTUVWXYZ0123456789_", NikolaParser::symbol_kind_type::S_IDENTIFIER);
    runLexerTest("int8_t1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("int16_t1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("int32_t1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("int64_t1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("int1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("real32_t1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("real64_t1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("real1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("bool1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("char1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("mod1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("void1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("true1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("false1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("this1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("nptr1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("let1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("const1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("compeval1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("pure1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("static1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("nothrow1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("in1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("inout1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("out1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("move1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("operator1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("delete1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("class1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("enum1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("public1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("protected1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("private1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("constructor1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("destructor1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("default1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("define1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("if1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("for1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("do1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("while1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("try1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("catch1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("throw1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("break1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("return1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("continue1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("match1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("when1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("typeset1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("template1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("where1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("type1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("module1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("namespace1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("import1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("from1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("as1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("with1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("is1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("sizeof1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("typeof1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("static_assert1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("assert1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("new1", NikolaParser::symbol_kind::S_IDENTIFIER);
    runLexerTest("dynamic1", NikolaParser::symbol_kind::S_IDENTIFIER);
}